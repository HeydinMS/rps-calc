{"version":3,"sources":["RPS.js","Result.js","App.js","reportWebVitals.js","index.js"],"names":["RPS","className","onClick","props","onIncrement","name","this","count","onDecrement","React","Component","Result","counts","state","turns","action","probabilityNextTurn","rock","paper","scissor","probabilities","getHighestProbability","target","highestPercent","highest","outcome","toFixed","push","bestGuess","highestWin","length","newProbabilities","toUpperCase","Table","TableRow","win","draw","lose","App","increment","bind","decrement","cap","max","console","log","newState","Object","assign","setState","min","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae9ef46b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass RPS extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className=\"rps-container\">\r\n                <button className='btn btn-primary rps-button' onClick={() => this.props.onIncrement(this.props.name)}>\r\n                    Increment\r\n                </button>\r\n                <div className=\"rps-display\">\r\n                    {this.props.count}\r\n                </div>\r\n                <button className='btn btn-primary rps-button' onClick={() => this.props.onDecrement(this.props.name)}>\r\n                    Decrement\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default RPS;","import React from 'react';\r\n\r\nclass Result extends React.Component{\r\n    render() {\r\n        let counts = this.props.state;\r\n        let turns = 9;\r\n        for (let action in counts) {\r\n            let actionCount = counts[action];\r\n            turns -= actionCount;\r\n        }\r\n        let probabilityNextTurn = {\r\n            'rock': (3-counts.rock)/turns,\r\n            'paper': (3-counts.paper)/turns,\r\n            'scissor': (3-counts.scissor)/turns\r\n        }\r\n        \r\n\r\n        let probabilities = {\r\n            'rock': {\r\n                'win': probabilityNextTurn.scissor,\r\n                'draw': probabilityNextTurn.rock,\r\n                'lose': probabilityNextTurn.paper\r\n            },\r\n            'paper':{\r\n                'win': probabilityNextTurn.rock,\r\n                'draw': probabilityNextTurn.paper,\r\n                'lose': probabilityNextTurn.scissor\r\n            },\r\n            'scissor': {\r\n                'win': probabilityNextTurn.paper,\r\n                'draw': probabilityNextTurn.scissor,\r\n                'lose': probabilityNextTurn.rock\r\n            }\r\n        }\r\n\r\n        function getHighestProbability(probabilities, target) {\r\n            let highestPercent = 0;\r\n            let highest = []\r\n            for (let action in probabilities) {\r\n                let outcome = probabilities[action][target].toFixed(2);\r\n    \r\n                if (outcome > highestPercent) {\r\n                    highestPercent = outcome\r\n                    highest = [action];\r\n                } else if (outcome === highestPercent) {\r\n                    highest.push(action);\r\n                }\r\n            }\r\n            return highest;\r\n        } \r\n\r\n        let highestWin = getHighestProbability(probabilities, 'win');\r\n        let bestGuess;\r\n        if (highestWin.length > 1) {\r\n            let newProbabilities = [];\r\n            for (let action of highestWin) {\r\n                newProbabilities[action] = probabilities[action];\r\n            }\r\n            bestGuess = getHighestProbability(newProbabilities, 'draw');\r\n        } else {\r\n            bestGuess = highestWin;\r\n        }\r\n        \r\n        let ret;\r\n        if (bestGuess.length === 1) {\r\n            ret = (\r\n                <div className=\"result\">\r\n                    <div className='statement'>\r\n                        <p>\r\n                            Best guess would be <b>{bestGuess[0].toUpperCase()}</b>.\r\n                            </p>\r\n                    </div>\r\n                  <Table probabilities={probabilities}/>\r\n                </div>\r\n            )\r\n        } else if (bestGuess.length === 3) {\r\n            ret = (\r\n                <div className=\"result\">\r\n                    <div className='statement'>\r\n                        <p>\r\n                            All options have the same chance of winning.\r\n                            </p>\r\n                    </div>\r\n                    <Table probabilities={probabilities}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            ret = (\r\n                <div className=\"result\"> \r\n                    <div className='statement'>\r\n                        <p>\r\n                            <b>bestGuess[0]</b>, and <b>bestGuess[1]</b> are equally likely to win and or result in a draw\r\n                        </p>\r\n                    </div>\r\n                    <Table probabilities={probabilities}/>\r\n                </div>\r\n                \r\n            )\r\n        }\r\n        return ret;\r\n    };\r\n};\r\n\r\nclass Table extends React.Component {\r\n    render() {\r\n        return (\r\n            <table className='rps-table result-table'>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Action</th>\r\n                        <th>Win</th>\r\n                        <th>Draw</th>\r\n                        <th>Lose</th>\r\n                    </tr>\r\n                    <TableRow name='rock' probabilities={this.props.probabilities.rock}/>\r\n                    <TableRow name='paper' probabilities={this.props.probabilities.paper}/>\r\n                    <TableRow name='scissor' probabilities={this.props.probabilities.scissor}/>\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nclass TableRow extends React.Component {\r\n    render() {\r\n        return(\r\n            <tr className='action-row'>\r\n                <td>{this.props.name.toUpperCase()}</td>\r\n                <td>{(this.props.probabilities.win * 100).toFixed(2)}%</td>\r\n                <td>{(this.props.probabilities.draw * 100).toFixed(2)}%</td>\r\n                <td>{(this.props.probabilities.lose * 100).toFixed(2)}%</td>\r\n            </tr>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Result;","\nimport './App.css';\nimport RPS from './RPS'\nimport React from 'react'\nimport Result from './Result'\n\nclass App extends React.Component{\n  constructor() {\n    super()\n    this.state = {\n      'cap': {\n        'max' : 3,\n        'min': 0\n      },\n      'counts': {\n        'rock':  0,\n        'paper': 0,\n        'scissor': 0\n      }\n    };\n\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  increment(action) {\n    if (this.state.counts[action] < this.state.cap.max) {\n      console.log(\"increment\", action);\n      let newState = Object.assign({}, this.state);\n      newState.counts[action] = newState.counts[action] + 1;\n      console.log(newState)\n      this.setState(newState)\n    }\n  }\n\n  decrement(action) {\n    if (this.state.counts[action] > this.state.cap.min) {\n      console.log(\"decrement\", action);\n      let newState = Object.assign({}, this.state);\n      newState.counts[action] = newState.counts[action] - 1;\n      console.log(newState)\n      this.setState(newState)\n    }\n  }        \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <table className=\"rps-table\">\n            <tbody>\n              <tr>\n                  <th>\n                      Rock\n                  </th>\n                  <th>\n                      Paper\n                  </th>\n                  <th>\n                      Scissor\n                  </th>\n              </tr>\n              <tr>\n                <td>\n                  <RPS id=\"rock-container\" name='rock' count={this.state.counts.rock} onIncrement={this.increment} onDecrement={this.decrement}/>\n                </td>\n                <td>\n                  <RPS id=\"paper-container\" name='paper' count={this.state.counts.paper} onIncrement={this.increment} onDecrement={this.decrement}/>\n                </td>\n                <td>\n                  <RPS id=\"scissor-container\" name='scissor' count={this.state.counts.scissor} onIncrement={this.increment}  onDecrement={this.decrement}/>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <Result state={this.state.counts}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}